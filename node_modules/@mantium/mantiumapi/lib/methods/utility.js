"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = {
  isNil: function isNil(val) {
    return [null, undefined].includes(val);
  },
  isNull: function isNull(val) {
    return val === null;
  },
  isNotNil: function isNotNil(val) {
    return !this.isNil(val);
  },
  isNotNull: function isNotNull(val) {
    return !this.isNull(val);
  },
  isObject: function isObject(val) {
    return _typeof(val) === 'object' && this.isNotNull(val);
  },
  objToQueryStr: function objToQueryStr(obj) {
    return this.isNotNil(obj) && this.isObject(obj) ? '?' + Object.keys(obj).map(function (key) {
      return key + '=' + obj[key];
    }).join('&') : '';
  },
  isString: function isString(val) {
    return typeof val === 'string';
  },
  isNotEmpty: function isNotEmpty(val) {
    return this.isNotNil(val) && val.length > 0;
  },
  isNotEmptyString: function isNotEmptyString(val) {
    return this.isString(val) && val.length > 0;
  },
  isNotNilOrEmptyString: function isNotNilOrEmptyString(val) {
    return this.isNotNil(val) && this.isNotEmptyString(val);
  },
  isNumber: function isNumber(val) {
    return typeof val === 'number';
  },
  isNotNumber: function isNotNumber(val) {
    return !this.isNumber(val);
  },
  hasProperty: function hasProperty(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
};